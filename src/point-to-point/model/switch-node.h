#ifndef SWITCH_NODE_H
#define SWITCH_NODE_H

#include <unordered_map>
#include <ns3/node.h>
#include "qbb-net-device.h"
#include "switch-mmu.h"

namespace ns3 {

class Packet;

class SwitchNode : public Node{
	static const uint32_t pCnt = 257;	// Number of ports used
	static const uint32_t qCnt = 8;	// Number of queues/priorities used
	uint32_t m_ecmpSeed;
	std::unordered_map<uint32_t, std::vector<int> > m_rtTable; // map from ip address (u32) to possible ECMP port (index of dev)

	// monitor of PFC
	uint32_t m_bytes[pCnt][pCnt][qCnt]; // m_bytes[inDev][outDev][qidx] is the bytes from inDev enqueued for outDev at qidx
	
	uint64_t m_txBytes[pCnt]; // counter of tx bytes

protected:
	bool m_ecnEnabled;
	uint32_t m_ccMode;

	uint32_t m_ackHighPrio; // set high priority for ACK/NACK

private:
	/**
	 * Floodgate mechanism:
	 * Check VOQ win and buffer packet into VOQ if necessary
	 * @return: (false: don't transfer this packet) - the switch-ACK generated by switch,
	 * 												  or data packet has no enough window and has been buffered in VOQ
	 *          (true: go on transfer this packet)
	 */
	bool CheckVOQWin(Ptr<Packet> packet, CustomHeader &ch, uint32_t inDev, uint32_t outDev, uint32_t qIndex);
	/**
	 * When receive Switch-ACK, resume window
	 * @return: stop to transfer packet
	 */
	bool ResumeVOQWin(SwitchACKTag acktag, CustomHeader &ch, uint32_t inDev);
	/**
	 * Send switchACK, for SWITCH_INGRESS_MODE
	 */
	void SendAccSwitchACK(uint32_t inDev ,SwitchACKTag acktag);
	void SendSwitchACK(uint32_t inDev, uint32_t dst, uint32_t src, uint64_t size);
	/**
	 * Send syn packet, for absolute psn + timeout
	 */
	void SendSYN(uint32_t dev, SwitchSYNTag syntag);
	void ReceiveSYN(SwitchSYNTag& syntag, CustomHeader &ch, uint32_t inDev);
	/**
	 * Symmetric routing
	 * --> record interface_id if necessary
	 */
	void TagForSymmeticRouting(Ptr<Packet> p, CustomHeader &ch, uint32_t inDev);

	/**
	 * used for DRILL
	 * When drill_load_mode == DRILL_LOAD_INTERVAL_SENT
	 * --> reset queue's statistics information every period of time
	 */
	EventId m_eventResetQueueStatitics;
	void ResetQueueStatisticsInterval();

	/*---------------------------------DRILL----------------------------------------------*/
	std::map<uint32_t, uint32_t> m_previousBestInterfaceMap;	// <dip, previousBestInterface>
	uint32_t m_drill_candidate;									// always 2 (power of two)
	/**
	 * used for DRILL
	 * Get the load of a interface
	 */
	uint32_t CalculateInterfaceLoad (uint32_t interface);
	/**
	 * do drill to select a egress
	 */
	uint32_t SelectEgressByDRILL(std::vector<int>& nexthops, CustomHeader &ch);

	/**
	 * For statistic
	 * \return switch total used buffer
	 */
	uint32_t DoStatistics();
	/**
	 * For statistic
	 */
	void PrintQlength();

	int GetOutDev(Ptr<const Packet>, CustomHeader &ch);
	void SendToDev(Ptr<Packet>p, CustomHeader &ch);
	static uint32_t EcmpHash(const uint8_t* key, size_t len, uint32_t seed);
	void CheckAndSendPfc(uint32_t inDev, uint32_t qIndex);
	void CheckAndSendResume(uint32_t inDev, uint32_t qIndex);

	void DoSwitchSend(Ptr<Packet>p, CustomHeader &ch, uint32_t outDev, uint32_t qIndex);
	void DoDequeueVOQ(Ptr<Packet>p, CustomHeader &ch, uint32_t outDev, uint32_t qIndex);

	bool output_realtime_buffer;
	// switch_id, queue_id, all, data, voq buffer of group 1, voq buffer, switch buffer
	TracedCallback<uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> m_traceRealtimeQueue;
	TracedCallback<uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t> m_traceRealtimeSwitchBw;


public:
	Ptr<SwitchMmu> m_mmu;
	bool m_isToR;
	bool m_isCore;

	static TypeId GetTypeId (void);
	SwitchNode();
	void SetEcmpSeed(uint32_t seed);
	void AddTableEntry(Ipv4Address &dstAddr, uint32_t intf_idx);
	void ClearTable();
	bool SwitchReceiveFromDevice(Ptr<NetDevice> device, Ptr<Packet> packet, CustomHeader &ch);
	void SwitchNotifyDequeue(uint32_t ifIndex, uint32_t inDev, uint32_t qIndex, Ptr<Packet> p);
};

} /* namespace ns3 */

#endif /* SWITCH_NODE_H */
